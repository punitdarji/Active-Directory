provider "aws" {
  region = "ap-south-1"
}

# Data source to find latest Windows AMI
data "aws_ami" "latest-windows-server" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["Windows_Server-2019-English-Full-Base-*"]
  }
}

# VPC
resource "aws_vpc" "ad_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Subnet
resource "aws_subnet" "ad_subnet" {
  vpc_id                  = aws_vpc.ad_vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
}

# Internet Gateway
resource "aws_internet_gateway" "ad_igw" {
  vpc_id = aws_vpc.ad_vpc.id
}

# Route Table
resource "aws_route_table" "ad_route_table" {
  vpc_id = aws_vpc.ad_vpc.id
}

resource "aws_route" "ad_route" {
  route_table_id         = aws_route_table.ad_route_table.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.ad_igw.id
}

resource "aws_route_table_association" "ad_rta" {
  subnet_id      = aws_subnet.ad_subnet.id
  route_table_id = aws_route_table.ad_route_table.id
}

# Security Group
resource "aws_security_group" "ad_sg" {
  vpc_id = aws_vpc.ad_vpc.id

  ingress {
    from_port   = 3389
    to_port     = 3389
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Active Directory Server


resource "aws_instance" "ad_server" {
  ami           = data.aws_ami.latest-windows-server.image_id # Replace with an appropriate Windows Server AMI
  instance_type = "t3.medium"
  subnet_id     = aws_subnet.ad_subnet.id
  key_name      = aws_key_pair.ec2_key_pair.key_name
  security_groups = [aws_security_group.ad_sg.id]

  user_data = <<-EOF
              <powershell>
              Install-WindowsFeature AD-Domain-Services -IncludeManagementTools
              Install-ADDSForest -DomainName "pwnsystem.local" -SafeModeAdministratorPassword (ConvertTo-SecureString "SecurePassw0rd!" -AsPlainText -Force)

              # Create Kerberos user
              New-ADUser -Name "kerberoast" -SamAccountName "kerberoast" -AccountPassword (ConvertTo-SecureString "SecurePassw0rd!" -AsPlainText -Force) -Enabled $true
              </powershell>
              EOF
}

# Key Pair
resource "aws_key_pair" "ec2_key_pair" {
  key_name   = "ec2-key-pair"
  public_key = tls_private_key.key.public_key_openssh
}

# Generate and store Key Pair locally
resource "tls_private_key" "key" {
  algorithm = "RSA"
}

resource "local_file" "private_key" {
  filename   = "./ec2-key-pair.pem"
  content    = tls_private_key.key.private_key_pem
  file_permission = "0600"
}

# Attacker Machine

resource "aws_instance" "attacker_machine" {
  ami           = "ami-0cda377a1b884a1bc" # Amazon Linux 2 for ap-south-1
  instance_type = "t3.medium"
  subnet_id     = aws_subnet.ad_subnet.id
  key_name      = aws_key_pair.ec2_key_pair.key_name
  security_groups = [aws_security_group.ad_sg.id]

  user_data = <<-EOF
              #!/bin/bash
              sudo apt update -y
              sudo apt install git python3 python3-pip -y
              git clone https://github.com/SecureAuthCorp/impacket.git
              cd impacket
              pip3 install .
              EOF
}

# Output Public IPs
output "ad_server_public_ip" {
  value = aws_instance.ad_server.public_ip
}

output "attacker_machine_public_ip" {
  value = aws_instance.attacker_machine.public_ip
}
